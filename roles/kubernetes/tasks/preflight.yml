# roles/kubernetes/tasks/preflight.yml
---
- name: "📦 Define common packages"
  etcd_version: "v3.5.16"
  etcd_install_dir: "/usr/local/bin"
  set_fact:
    common_packages: >-
      {{
        ['conntrack', 'socat', 'ebtables', 'ethtool', 'ipset', 'nfs-utils']
        if ansible_distribution == 'Rocky'
        else ['conntrack', 'socat', 'ebtables', 'ethtool', 'ipset', 'nfs-common']
      }}

# Improve etcdctl installation with checks
- name: Check if etcdctl already installed
  stat:
    path: "{{ etcd_install_dir }}/etcdctl"
  register: etcdctl_installed

- name: Download etcd binaries
  ansible.builtin.get_url:
    url: "https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    dest: "{{ etcd_tempdir.path }}/etcd.tar.gz"
    checksum: "sha256:8f9f3108f058b9f7a5e3a30b8a5c8f1a6c5a4b4d4e2d2b2b2b2b2b2b2b2b2b2b"  # Replace with actual checksum
    timeout: 30
  when: not etcdctl_installed.stat.exists

- name: Create temporary directory for etcd download
  ansible.builtin.tempfile:
    state: directory
    suffix: etcd
  register: etcd_tempdir

- name: Download etcd binaries
  ansible.builtin.get_url:
    url: "https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    dest: "{{ etcd_tempdir.path }}/etcd.tar.gz"
    checksum: "sha256:8f9f3108f058b9f7a5e3a30b8a5c8f1a6c5a4b4d4e2d2b2b2b2b2b2b2b2b2b2b"  # Replace with actual checksum
    timeout: 30

- name: Extract etcd archive
  ansible.builtin.unarchive:
    src: "{{ etcd_tempdir.path }}/etcd.tar.gz"
    dest: "{{ etcd_tempdir.path }}"
    remote_src: yes
    creates: "{{ etcd_tempdir.path }}/etcd-{{ etcd_version }}-linux-amd64/etcdctl"

- name: Install etcdctl system-wide
  ansible.builtin.copy:
    src: "{{ etcd_tempdir.path }}/etcd-{{ etcd_version }}-linux-amd64/etcdctl"
    dest: "{{ etcd_install_dir }}/etcdctl"
    owner: root
    group: root
    mode: '0755'
    remote_src: yes

- name: Verify etcdctl installation
  ansible.builtin.command: "etcdctl version"
  register: etcdctl_version
  changed_when: false

- name: Display etcdctl version
  ansible.builtin.debug:
    var: etcdctl_version.stdout_lines

- name: Clean up temporary directory
  ansible.builtin.file:
    path: "{{ etcd_tempdir.path }}"
    state: absent


- name: "📥 Load Kubernetes cluster settings into 'networking'"
  include_vars:
    file: "{{ role_path }}/../../group_vars/k8s-cluster.yml"
  tags: preflight

- name: ✅ Debug networking keys
  debug:
    var: networking
  tags: preflight


- name: "🛡️ Base System Checks"
  block:
    # Hardware requirements
    - name: "💽 Verify minimum RAM (4GB)"
      command: awk '/MemTotal/ {print $2}' /proc/meminfo
      register: mem_total
      changed_when: false
      failed_when: mem_total.stdout|int < 4000000
      tags: always

    - name: "🖥️ Verify CPU cores (2+)"
      command: nproc
      register: cpu_cores
      changed_when: false
      failed_when: cpu_cores.stdout|int < 2
      tags: always

    # Kernel modules (using command module as fallback)
    - name: "🔧 Load required kernel modules"
      command: modprobe {{ item }}
      loop:
        - overlay
        - br_netfilter
        - nf_conntrack
      tags: always

    - name: "📦 Install common packages"
      package:
        name: >-
          {{
            ['conntrack', 'socat', 'ebtables', 'ethtool', 'ipset'] +
            (['nfs-utils'] if ansible_distribution == 'Rocky' else ['nfs-common'])
          }}
        state: present
      tags: always

    - name: "📦 Ensure tc (iproute-tc) is installed"
      package:
        name: iproute-tc
        state: present
      when: ansible_os_family == "RedHat"
      tags: always

    # Kernel parameters (using command module)
    - name: "📝 Configure kernel sysctl parameters"
      command: sysctl -w {{ item.key }}={{ item.value }}
      loop:
        - { key: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { key: "net.ipv4.ip_forward", value: "1" }
        - { key: "vm.swappiness", value: "0" }
      tags: always

    # Make sysctl changes persistent
    - name: "💾 Persist sysctl settings"
      lineinfile:
        path: /etc/sysctl.conf
        line: "{{ item.key }} = {{ item.value }}"
        state: present
      loop:
        - { key: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { key: "net.ipv4.ip_forward", value: "1" }
        - { key: "vm.swappiness", value: "0" }
      tags: always

    - name: 🛠️ Ensure kubelet-required sysctl values are set
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        reload: yes
        state: present
      loop:
        - { key: "vm.overcommit_memory", value: "1" }
        - { key: "kernel.panic", value: "10" }
      tags: always

    # Network checks
    - name: "🌐 Verify network connectivity"
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 22
        timeout: 30
      tags: always

- name: "⚙️ Hardware Validation"
  block:
    # Swap configuration
    - name: "🔄 Verify swap is disabled"
      shell: "swapon --show | wc -l"
      register: swap_status
      changed_when: false
      failed_when: swap_status.stdout != "0"
      tags: validation

    # GPU-specific checks
    - name: "🎮 NVIDIA GPU Pre-checks"
      block:
        - name: "🔍 Detect NVIDIA GPUs"
          command: lspci | grep -iq nvidia
          register: gpu_detected
          changed_when: false
          failed_when: false

        - name: "📦 Install GPU build dependencies"
          package:
            name: "{{ ['gcc', 'make', 'dkms'] + 
                      (['kernel-devel'] if ansible_distribution == 'Rocky' 
                       else ['linux-headers-generic']) }}"
            state: present
          when: 
            - gpu_detected.rc == 0
            - "'gpu' in group_names"

        - name: "🔌 Verify CUDA compatibility"
          command: lspci -nn | grep -i 'nvidia'
          when: "'gpu' in group_names"
          register: cuda_compatible
          changed_when: false
          failed_when: cuda_compatible.rc != 0
      when: "'gpu' in group_names"
      tags: validation

    # Disk space check
    - name: "💾 Verify root partition space (10GB minimum)"
      command: df --output=avail -BG / | tail -1 | tr -d 'G'
      register: root_space
      changed_when: false
      failed_when: root_space.stdout|int < 10
      tags: validation

- name: Add Kubernetes repository (pkgs.k8s.io for Rocky 9+)
  ansible.builtin.yum_repository:
    name: kubernetes
    description: Kubernetes Repo
    baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ versions.k8s.repo | regex_search('^\\d+\\.\\d+') }}/rpm/"
    enabled: yes
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey:
      - "https://pkgs.k8s.io/core:/stable:/v{{ versions.k8s.repo | regex_search('^\\d+\\.\\d+') }}/rpm/repodata/repomd.xml.key"
  when: ansible_os_family == "RedHat"
  tags: [kubernetes, preflight]

- name: Refresh DNF metadata after adding Kubernetes repo
  command: dnf makecache --enablerepo=kubernetes
  changed_when: false
  when: ansible_os_family == "RedHat"
  tags: [kubernetes, preflight]

- name: "✅ Ensure containerd config enables CRI plugin"
  command: containerd config default
  register: containerd_default_config
  tags: [kubernetes, preflight]

# - name: Insert sandbox_image into containerd config
#   set_fact:
#     containerd_patched_config: >-
#       {{
#         containerd_default_config.stdout
#         | regex_replace(
#             '(?<=\\[plugins."io.containerd.grpc.v1.cri"\\]\\n)',
#             'sandbox_image = "registry.k8s.io/pause:3.10"\n'
#           )
#       }}
#   tags: [kubernetes, preflight]  

# - name: Deploy containerd config
#   template:
#     src: containerd.toml.j2
#     dest: /etc/containerd/config.toml
#   notify: 🔄 Restart containerd
#   tags: [kubernetes, preflight]

- name: 📄 Apply containerd config with patched CRI sandbox image
  copy:
    content: "{{ containerd_config }}"
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: 0644
  notify: 🔄 Restart containerd
  tags: [kubernetes, preflight]

- name: "🧠 Compute DNS IP (if ipaddr is available)"
  set_fact:
    dns_ip: "{{ (networking.service_network.cidr | ipaddr('network')) | ipaddr('+10') }}"
  when: "'ipaddr' in ansible_filters"

- name: 🧪 Preview alias config content
  debug:
    msg:
      - "Cluster Name: {{ cluster_name }}"
      - "DNS IP: {{ networking.service_network.cidr.split('.')[0:3] | join('.') ~ '.10' }}"
      - "No Proxy: {{ [networking.pod_network.cidr, networking.service_network.cidr] + networking.dns.domains | map('regex_replace', '^\\.', '*.') | list | join(',') }}"
      - "Network Alias IPs: {{ networking.network_alias_ips }}"
  when: inventory_hostname in networking.network_alias_ips

- name: Flatten networking settings to avoid nested Jinja
  set_fact:
    network_alias_interface: "{{ networking.network_alias_interface }}"
    network_alias_ips: "{{ networking.network_alias_ips }}"
    network_alias_netmask: "{{ networking.network_alias_netmask }}"
  when: networking is defined
  tags: [kubernetes, preflight]

- name: Set MACVLAN interface name
  set_fact:
    k8s_macvlan_interface: "k8s0"
  tags: [kubernetes, preflight]

- name: Create virtual MACVLAN interface {{ k8s_macvlan_interface }} bound to {{ network_alias_interface }}
  become: true
  command: ip link add {{ k8s_macvlan_interface }} link {{ network_alias_interface }} type macvlan mode bridge
  args:
    warn: false
  register: create_k8s0_result
  changed_when: "'File exists' not in create_k8s0_result.stderr"
  failed_when: create_k8s0_result.rc != 0 and 'File exists' not in create_k8s0_result.stderr
  when:
    - ansible_os_family == "RedHat"
    - network_alias_interface is defined
    - inventory_hostname in network_alias_ips
  tags: [kubernetes, network]

- name: Assign static IP to {{ k8s_macvlan_interface }}
  become: true
  command: ip addr add {{ network_alias_ips[inventory_hostname] }}/{{ network_alias_netmask | default('24') }} dev {{ k8s_macvlan_interface }}
  args:
    warn: false
  register: assign_ip_result
  changed_when: "'File exists' not in assign_ip_result.stderr"
  failed_when: assign_ip_result.rc != 0 and 'exists' not in assign_ip_result.stderr
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname in network_alias_ips
  tags: [kubernetes, network]




# - name: "Bring up k8s0"
#   become: true
#   command: ip link set k8s0 up
#   when:
#     - ansible_os_family == "RedHat"
#   tags: [kubernetes, network]


# - name: "Create persistent alias IP config (K8s alias interface)"
#   template:
#     src: ifcfg-k8s.j2
#     dest: "/etc/sysconfig/network-scripts/ifcfg-{{ network_alias_interface }}"
#     mode: '0644'
#     owner: root
#     group: root
#   when:
#     - ansible_os_family == "RedHat"
#     - network_alias_interface is defined
#     - network_alias_ips is defined
#     - inventory_hostname in network_alias_ips
#  # notify: "🔄 Restart network"
#   tags: [kubernetes, network]

- name: Bring up {{ k8s_macvlan_interface }}
  become: true
  command: ip link set {{ k8s_macvlan_interface }} up
  when: 
    - ansible_os_family == "RedHat"
    - k8s_macvlan_interface is defined
    - network_alias_interface is defined
    - network_alias_ips is defined
    - inventory_hostname in network_alias_ips
  tags: [kubernetes, network]

- name: Verify {{ k8s_macvlan_interface }} IP is active
  shell: ip a show {{ k8s_macvlan_interface }} | grep {{ network_alias_ips[inventory_hostname] }}
  register: alias_check
  changed_when: false
  failed_when: alias_check.rc != 0
  when:
    - k8s_macvlan_interface is defined
    - inventory_hostname in network_alias_ips
  tags: [kubernetes, preflight]

