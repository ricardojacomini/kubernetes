# roles/kubernetes/tasks/master.yml
---
- name: Set local Kubernetes version
  set_fact:
    k8s_version: "{{ versions.kubernetes }}"

- name: Print Kubernetes version
  debug:
    msg: "Using Kubernetes version: {{ k8s_version }}"

- name: Install Kubernetes packages
  package:
    name:
      - kubectl-{{ k8s_version }}
      - kubelet-{{ k8s_version }}
      - kubeadm-{{ k8s_version }}
      - kubernetes-cni-{{ versions.kubernetes_cni }}
    state: present

# ✅ Ensure kubelet service is available before triggering any handlers
- name: Ensure kubelet is installed
  package:
    name: kubelet
    state: present

- name: Re-exec systemd
  command: systemctl daemon-reexec
  changed_when: false

- name: Reload systemd
  command: systemctl daemon-reload
  changed_when: false

- name: Gather service facts
  service_facts:

- name: Ensure kubelet service is enabled and started
  systemd:
    name: kubelet
    enabled: yes
    state: started
  when: "'kubelet.service' in ansible_facts.services"

- name: "🔍 DEBUG: Confirm handler is loaded (Restart Kubelet)"
  debug:
    msg: "Handler will trigger successfully"
  notify: "Restart Kubelet"

- name: "🔄 Configure kubelet"
  template:
    src: kubelet.conf.j2
    dest: /etc/sysconfig/kubelet
    owner: root
    group: root
    mode: 0644
  notify: "🔄 Restart Kubelet"

- name: "🛡️ Initialize Kubernetes Control Plane"
  command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --service-cidr={{ service_cidr }}
    --control-plane-endpoint="{{ inventory_hostname }}"
    --upload-certs
    --apiserver-cert-extra-sans="{{ ansible_host }}"
    --ignore-preflight-errors=Swap,SystemVerification
  register: kubeadm_init
  changed_when: "'Your Kubernetes control-plane has initialized' in kubeadm_init.stdout"
  args:
    creates: /etc/kubernetes/admin.conf

- name: "🔗 Set kubectl context for cluster administration"
  block:

    - name: "📍 Determine kubeconfig directory"
      set_fact:
        kubeconfig_dir: "{{ '/root/.kube' if ansible_user == 'root' else '/home/' + ansible_user + '/.kube' }}"

    - name: "👥 Get primary group of the user"
      command: id -gn {{ ansible_user }}
      register: user_primary_group
      changed_when: false

    - name: "📁 Ensure .kube directory exists"
      file:
        path: "{{ kubeconfig_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ user_primary_group.stdout }}"
        mode: '0755'

    - name: "🔍 Check if admin.conf exists"
      stat:
        path: /etc/kubernetes/admin.conf
      register: admin_conf_file

    - name: "📄 Copy admin.conf to user kubeconfig"
      copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: "{{ kubeconfig_dir }}/config"
        owner: "{{ ansible_user }}"
        group: "{{ user_primary_group.stdout }}"
        mode: '0600'
      when: admin_conf_file.stat.exists

    - name: "🧠 Extract join command from init output"
      set_fact:
        kubeadm_join_cmd: "{{ kubeadm_init.stdout_lines | select('search', '^kubeadm join') | list | join(' ') }}"

    - name: "📝 Save kubeadm join command"
      copy:
        content: "{{ kubeadm_join_cmd }}"
        dest: /root/join-command.sh
        mode: '0755'

- name: Install Pod network
  command: kubectl apply -f "{{ network_plugins[network_plugin].manifest }}"
  when: kubeadm_init is changed
  register: network_install
  changed_when: "'created' in network_install.stdout or 'configured' in network_install.stdout"

- name: Validate cluster
  command: kubectl get nodes
  register: kubectl_nodes
  changed_when: false
  retries: 5
  delay: 10
  until: kubectl_nodes.rc == 0
  when: kubeadm_init is changed